// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Canvas /> renders 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Canvas
    addXaxis={[Function]}
    addYaxis={[Function]}
    minusXaxis={[Function]}
    minusYaxis={[Function]}
    xAxisValue={0}
    yAxisValue={0}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="red-box-container"
          style={
                    Object {
                              "left": 0,
                              "top": 0,
                            }
          }
>
          y: 
          0
          , x: 
          0
          <div
                    className="red-box"
          />
</div>,
        <div
          className="canvas-board"
/>,
        <div
          className="controll-pannel"
>
          <div
                    className="button up"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
          >
                    UP
          </div>
          <div
                    className="button down"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
          >
                    DOWN
          </div>
          <div
                    className="button left"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
          >
                    LEFT
          </div>
          <div
                    className="button right"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
          >
                    RIGHT
          </div>
</div>,
      ],
      "className": "canvas",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "y: ",
            0,
            ", x: ",
            0,
            <div
              className="red-box"
/>,
          ],
          "className": "red-box-container",
          "style": Object {
            "left": 0,
            "top": 0,
          },
        },
        "ref": null,
        "rendered": Array [
          "y: ",
          0,
          ", x: ",
          0,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "red-box",
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "canvas-board",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="button up"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="button"
>
              UP
</div>,
            <div
              className="button down"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="button"
>
              DOWN
</div>,
            <div
              className="button left"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="button"
>
              LEFT
</div>,
            <div
              className="button right"
              onClick={[Function]}
              onKeyDown={[Function]}
              role="button"
>
              RIGHT
</div>,
          ],
          "className": "controll-pannel",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "UP",
              "className": "button up",
              "onClick": [Function],
              "onKeyDown": [Function],
              "role": "button",
            },
            "ref": null,
            "rendered": "UP",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "DOWN",
              "className": "button down",
              "onClick": [Function],
              "onKeyDown": [Function],
              "role": "button",
            },
            "ref": null,
            "rendered": "DOWN",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "LEFT",
              "className": "button left",
              "onClick": [Function],
              "onKeyDown": [Function],
              "role": "button",
            },
            "ref": null,
            "rendered": "LEFT",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "RIGHT",
              "className": "button right",
              "onClick": [Function],
              "onKeyDown": [Function],
              "role": "button",
            },
            "ref": null,
            "rendered": "RIGHT",
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="red-box-container"
            style={
                        Object {
                                    "left": 0,
                                    "top": 0,
                                  }
            }
>
            y: 
            0
            , x: 
            0
            <div
                        className="red-box"
            />
</div>,
          <div
            className="canvas-board"
/>,
          <div
            className="controll-pannel"
>
            <div
                        className="button up"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        role="button"
            >
                        UP
            </div>
            <div
                        className="button down"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        role="button"
            >
                        DOWN
            </div>
            <div
                        className="button left"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        role="button"
            >
                        LEFT
            </div>
            <div
                        className="button right"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        role="button"
            >
                        RIGHT
            </div>
</div>,
        ],
        "className": "canvas",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "y: ",
              0,
              ", x: ",
              0,
              <div
                className="red-box"
/>,
            ],
            "className": "red-box-container",
            "style": Object {
              "left": 0,
              "top": 0,
            },
          },
          "ref": null,
          "rendered": Array [
            "y: ",
            0,
            ", x: ",
            0,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "red-box",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "canvas-board",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="button up"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="button"
>
                UP
</div>,
              <div
                className="button down"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="button"
>
                DOWN
</div>,
              <div
                className="button left"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="button"
>
                LEFT
</div>,
              <div
                className="button right"
                onClick={[Function]}
                onKeyDown={[Function]}
                role="button"
>
                RIGHT
</div>,
            ],
            "className": "controll-pannel",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "UP",
                "className": "button up",
                "onClick": [Function],
                "onKeyDown": [Function],
                "role": "button",
              },
              "ref": null,
              "rendered": "UP",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "DOWN",
                "className": "button down",
                "onClick": [Function],
                "onKeyDown": [Function],
                "role": "button",
              },
              "ref": null,
              "rendered": "DOWN",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "LEFT",
                "className": "button left",
                "onClick": [Function],
                "onKeyDown": [Function],
                "role": "button",
              },
              "ref": null,
              "rendered": "LEFT",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "RIGHT",
                "className": "button right",
                "onClick": [Function],
                "onKeyDown": [Function],
                "role": "button",
              },
              "ref": null,
              "rendered": "RIGHT",
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
